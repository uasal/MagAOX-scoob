#!/usr/bin/env python
import threading
import pprint
import sys
import time
from astropy.io import fits
import datetime
from pprint import pprint
import glob
import pathlib
import tqdm
import orjson
from collections import defaultdict
from purepyindi.client import INDIClient
from purepyindi.constants import SwitchState

import logging

log = logging.getLogger(__name__)

SCIENCE_CAMERAS = ['camsci1', 'camsci2']

ADCSPEEDS_TO_ELEMENTS = {
    0.1: 'ccd_00_1MHz',
    1: 'ccd_01MHz',
    5: 'emccd_05MHz',
    10: 'emccd_10MHz',
    20: 'emccd_20MHz',
    30: 'emccd_30MHz',
}

MAX_N_DARK_FRAMES = 1000
MAX_DARK_TIME_MIN = 5
MAX_COMMAND_TIMEOUT_SEC = 60

def config_to_name(configuration):
    bits = ["darks"]
    for key in configuration:
        bits.append(key.replace(' ', '_'))
        bits.append(str(configuration[key]))
    return "_".join(bits)

def take_darks(indi, camname, configuration, max_n_frames, max_dark_time_sec, dry_run):
    # Make sure everything's off
    orig_exptime = indi[f"{camname}.exptime.current"]
    indi[f"{camname}.vshift_speed.1_2us"] = SwitchState.ON  # Default at startup, shouldn't be changed, but a possible TODO once it's available in headers
    
    # Make sure it's dark
    indi[f"{camname}.shutter.toggle"] = SwitchState.ON
    
    # ADC SPEED
    try:
        readout_speed_elem = ADCSPEEDS_TO_ELEMENTS[configuration['ADC SPEED']]
    except KeyError:
        log.error(f"No 'ADC SPEED' key in configuration, can't apply it")
        return
    readout_speed_indi = f"{camname}.readout_speed.{readout_speed_elem}"
    
    log.debug(f"Requesting {readout_speed_indi}")
    indi.wait_for_state({
        readout_speed_indi: SwitchState.ON,
    }, timeout=MAX_COMMAND_TIMEOUT_SEC)

    # EMGAIN
    emgain = configuration.get('EMGAIN', 1) 
    indi[f"{camname}.emgain.target"] = emgain
    if indi[f"{camname}.emgain.target"] != emgain:
        indi[f"{camname}.emgain.target"] = emgain
        indi.wait_for_state({
            f"{camname}.emgain.target": {'value': emgain},
        }, timeout=MAX_COMMAND_TIMEOUT_SEC)
    
    # ROI
    roi_state = {
        f"{camname}.roi_region_bin_x.target": max(configuration['ROI XBIN'], 1),
        f"{camname}.roi_region_bin_y.target": max(configuration['ROI YBIN'], 1),
        f"{camname}.roi_region_w.target": configuration['HEIGHT'],
        f"{camname}.roi_region_h.target": configuration['WIDTH'],
        f"{camname}.roi_region_y.target": 511.5,
        f"{camname}.roi_region_x.target": 511.5,
    }
    wait_state = {}
    for key, val in roi_state.items():
        if indi[key] != val:
            indi[key] = val
            wait_state[key] = val
    indi[f"{camname}.roi_set.request"] = SwitchState.ON
    log.debug(f"Waiting up to {MAX_COMMAND_TIMEOUT_SEC} sec for camera to configure...")
    indi.wait_for_state(wait_state, timeout=MAX_COMMAND_TIMEOUT_SEC)
    
    # EXPTIME
    exptime = configuration['EXPTIME']
    indi[f"{camname}.exptime.target"] = exptime
    overhead_wait_sec = orig_exptime
    darks_wait_sec = max_dark_time_sec if max_n_frames * exptime > max_dark_time_sec else max_n_frames * exptime
    wait_for_frames = overhead_wait_sec + darks_wait_sec
    
    if not dry_run:
        log.debug(f"Waiting for the streamwriter {camname}-sw to be writing and exposure time to be {exptime} sec...")
        indi.wait_for_state({
            f"{camname}-sw.writing.toggle": SwitchState.ON,
            f"{camname}.exptime.current": {'value': exptime, 'test': lambda new, old: abs(new - old) < 0.0001},
        }, timeout=MAX_COMMAND_TIMEOUT_SEC)
        log.debug(f"Done. Now, waiting {int(wait_for_frames)} sec while approx. {int(wait_for_frames / exptime)} frames are recorded...")
        time.sleep(wait_for_frames)
        indi.wait_for_state({
            f"{camname}-sw.writing.toggle": SwitchState.OFF,
        }, timeout=MAX_COMMAND_TIMEOUT_SEC)
        log.debug("Done recording, stream writer off")
    else:
        log.debug(f"Dry run, skipping data-taking")

def generate_needed_properties(cameras):
    props = [
        "observers.obs_on"
    ]
    for camname in cameras:
        props.append(f"{camname}.exptime")
        props.append(f"{camname}.vshift_speed")
        props.append(f"{camname}.readout_speed")
        props.append(f"{camname}.roi_region_bin_x")
        props.append(f"{camname}.roi_region_bin_y")
    return props

def dark_taker_task(c, camname, configs, max_n_frames, max_dark_time_sec, dry_run):
    log.info(f"{camname} task started!")
    n_configs = len(configs)
    log.info(f"Taking darks in {n_configs} {camname} configs...")
    for i, config_meta in enumerate(configs):
        config = config_meta['setup']
        frames_count = config_meta['frames_count']
        log.info(f"[{camname}] Starting config {i+1} / {n_configs} (corresponding to {frames_count} open-shutter frames)")
        take_darks(c, camname, config, max_n_frames, max_dark_time_sec, dry_run)
        log.info(f"[{camname}] Finished {i+1} / {n_configs}.")
    log.info(f"{camname} task finished!")

def main(args):
    cameras = args.cameras if args.cameras is not None else SCIENCE_CAMERAS
    dry_run = args.dry_run
    max_n_frames = args.max_n_frames
    max_dark_time_sec = args.max_minutes * 60
    darks_to_take_path = args.DARKS_TO_TAKE_JSON
    c = INDIClient('localhost', 7624)
    c.start()
    
    try:
        log.debug("Waiting for properties...")
        c.wait_for_properties(generate_needed_properties(cameras), timeout=MAX_COMMAND_TIMEOUT_SEC)
    except TimeoutError as e:
        log.exception("Timed out waiting for properties")
        sys.exit(1)
    log.debug("Connected to INDI")
    with open(darks_to_take_path) as fh:
        darks_to_take = orjson.loads(fh.read())
    today = datetime.date.today()
    darks_folder_name = f"darks_backfill_run_{today.isoformat()}" if not args.title else args.title
    log.debug(f"Setting up observation '{darks_folder_name}'")
    c[f"observers.observers.vizzy-at-xwcl-dot-science"] = SwitchState.ON
    c[f"observers.obs_name.target"] = darks_folder_name
    c.wait_for_state({
        f"observers.writers.{name}": SwitchState.OFF
        for name in c.devices['observers'].properties['writers'].elements
    }, timeout=MAX_COMMAND_TIMEOUT_SEC)
    # Make sure it's dark
    c.wait_for_state({
        f"{camname}.shutter.toggle": SwitchState.ON
        for camname in cameras
    }, timeout=MAX_COMMAND_TIMEOUT_SEC)
    try:
        if not dry_run:
            c.wait_for_state({
                "observers.obs_on.toggle": SwitchState.ON
            }, timeout=MAX_COMMAND_TIMEOUT_SEC)
        tasks = []
        for camname in cameras:
            th = threading.Thread(target=dark_taker_task, args=(c, camname, darks_to_take[camname], max_n_frames, max_dark_time_sec, dry_run))
            th.start()
            tasks.append(th)
        log.info("Waiting for tasks to complete...")
        for th in tasks:
            th.join()
    finally:
        c.wait_for_state({
            "observers.obs_on.toggle": SwitchState.OFF
        }, timeout=MAX_COMMAND_TIMEOUT_SEC)
        log.debug("Switched off observing toggle")
        c.wait_for_state({
            f"{camname}-sw.writing.toggle": SwitchState.OFF
            for camname in cameras
        }, timeout=MAX_COMMAND_TIMEOUT_SEC)
        log.debug("Ensured relevant streamwriters are off")
        
    

if __name__ == "__main__":
    this_year = datetime.datetime.now().year
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('DARKS_TO_TAKE_JSON', help="Darks to take output from `collect_camera_configs_for_darks` as JSON")
    parser.add_argument('-v', '--verbose', help="Turn on debug output", action='store_true')
    parser.add_argument('-t', '--title', help="Use this title for the backfill observation")
    parser.add_argument('-n', '--max-n-frames', help=f"Maximum number of frames to wait for (smaller of wall time and n frames is used) (default: {MAX_N_DARK_FRAMES})", type=int, default=MAX_N_DARK_FRAMES)
    parser.add_argument('-m', '--max-minutes', help=f"Maximum number of minutes to wait for (smaller of wall time and n frames is used) (default: {MAX_DARK_TIME_MIN})", type=int, default=MAX_DARK_TIME_MIN)
    parser.add_argument('-c', '--cameras', help=f"Cameras to check, default: {SCIENCE_CAMERAS}", action='append', default=None)
    parser.add_argument('--dry-run', help=f"Don't actually record data", action='store_true')
    args = parser.parse_args()

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG if args.verbose else logging.INFO)
    formatter = logging.Formatter('%(asctime)s %(levelname)s - %(message)s')
    ch.setFormatter(formatter)
    log.addHandler(ch)
    log.setLevel(logging.DEBUG)
    now = datetime.datetime.utcnow()
    datestamp = ''.join(filter(str.isdigit, now.isoformat()))
    logfile = f'shot_in_the_dark_{datestamp}.log'
    log.addHandler(logging.FileHandler(logfile))
    log.info(f'Complete logs in {logfile}')
    main(args)
